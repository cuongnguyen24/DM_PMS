#pragma checksum "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\TimeKeeping\_NightTable.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "12d43dbb5c4af4d7c10da1ebe8a11c75d0b58c3d5ff70129c16b39c60c6d56c7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TimeKeeping__NightTable), @"mvc.1.0.view", @"/Views/TimeKeeping/_NightTable.cshtml")]
namespace AspNetCore
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\_ViewImports.cshtml"
using PMS

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\_ViewImports.cshtml"
using PMS.Models

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"12d43dbb5c4af4d7c10da1ebe8a11c75d0b58c3d5ff70129c16b39c60c6d56c7", @"/Views/TimeKeeping/_NightTable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"21d866b776ed6466e6893069e209361096b8f3be545ab23ace3daa4c5be95fd9", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_TimeKeeping__NightTable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.css"" />
<div id=""simpleTimekeeping"" style=""overflow:hidden;"">
    <div id=""hotContainer""></div>
    <script src=""https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.js""></script>
    <script>
        (function () {
            const container = document.getElementById('hotContainer');

            const monthLabels = Array.from({ length: 12 }, (_, i) => `T${i + 1}`);
            const columns = [];

            // Cấu hình cột
            columns.push({ data: 0, type: 'numeric', width: 50 });  // STT
            columns.push({ data: 1, type: 'text', width: 250 });     // Họ và tên
            for (let i = 0; i < 12; i++) {
                columns.push({
                    data: 2 + i,
                    type: 'numeric',
                    numericFormat: { pattern: '0' },
                    allowInvalid: false,
                    width: 50
                });
            }
     ");
            WriteLiteral(@"       columns.push({
                data: 14,
                type: 'numeric',
                readOnly: true,
                width: 80
            }); // Tổng cả năm

            const nestedHeaders = [
                ['Số TT', 'Họ và tên', ...monthLabels, 'TỔNG HỢP CẢ NĂM']
            ];

            // Hàm tạo dòng nhóm (ví dụ: ""Người Quản lý"")
            function makeGroupRow(label) {
                const row = new Array(15).fill('');
                row[1] = label;
                return row;
            }

            // Hàm tạo dòng nhân viên
            function makeEmployeeRow(index, name) {
                const row = new Array(15).fill('');
                row[0] = index;
                row[1] = name;
                return row;
            }

            const data = [
                makeGroupRow('Người Quản lý'),
                makeEmployeeRow(1, 'Nguyễn 111'),
                makeEmployeeRow(2, 'Nguyễn 112'),
                makeEmployeeRow(3, 'Nguyễn 113'),
                makeEmploye");
            WriteLiteral(@"eRow(4, 'Nguyễn 114'),
                makeEmployeeRow(5, 'Nguyễn 115'),
                makeEmployeeRow(6, 'Nguyễn 116'),
                makeEmployeeRow(7, 'Nguyễn 117'),

                makeGroupRow('Phòng Tổng hợp HĐTV'),
                makeEmployeeRow(1, 'Nguyễn 118'),
                makeEmployeeRow(2, 'Nguyễn 119'),
                makeEmployeeRow(3, 'Nguyễn 120'),
            ];

            const hot = new Handsontable(container, {
                data: data,
                columns: columns,
                colHeaders: false,
                rowHeaders: true,
                nestedHeaders: nestedHeaders,
                height: calculateHotHeight(),
                width: '100%',
                manualColumnFreeze: true,
                manualColumnMove: true,
                fixedColumnsLeft: 2,
                rowHeaderWidth: 50,
                contextMenu: {
                    items: {
                        row_above: {},
                        row_below: {},
                        hsep1:");
            WriteLiteral(@" '---------',
                        freeze_column: { name: 'Cố định cột' },
                        unfreeze_column: { name: 'Bỏ cố định cột' },
                        hsep2: '---------',
                        undo: {},
                        redo: {},
                        clear_custom: {
                            name: 'Xóa nội dung các ô đã chọn',
                            callback() { hot.emptySelectedCells(); }
                        }
                    }
                },
                filters: true,
                dropdownMenu: true,
                licenseKey: 'non-commercial-and-evaluation',

                // Tô style cho dòng nhóm
                cells: function (row, col) {
                    const cellProperties = {};
                    const dataAtRow = this.instance.getDataAtRow(row);
                    // Nếu dòng là dòng nhóm (chỉ có cột 1 có chữ)
                    if (dataAtRow[1] && dataAtRow[0] === '') {
                        cellProperties.readOnly = true;
     ");
            WriteLiteral(@"                   cellProperties.renderer = function (instance, td, row, col, prop, value, cellProperties) {
                            td.style.fontStyle = 'italic';
                            td.style.color = 'blue';
                            td.style.fontWeight = 'bold';
                            td.style.background = '#f0f8ff';
                            td.innerHTML = value;
                        };
                    }
                    return cellProperties;
                },



            // Hàm tính chiều cao phù hợp
            function calculateHotHeight() {
                const windowHeight = window.innerHeight;
                const offset = 360; // Trừ phần header, filter, padding, navbar, ...
                const calculated = windowHeight - offset;
                return Math.max(calculated, 320); // Tối thiểu 320px
            }

            // Tự động resize khi thay đổi kích thước cửa sổ
            window.addEventListener('resize', () => {
                const newHeight = ");
            WriteLiteral("calculateHotHeight();\n                hot.updateSettings({ height: newHeight });\n            });\n\n        })();\n    </script>\n</div>\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
