#pragma checksum "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\TimeKeeping\_NightTable.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "efff380852b33dfbc8613e2296327c95280aa7ce7afa4d3e9a2f5b346d9a67dd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TimeKeeping__NightTable), @"mvc.1.0.view", @"/Views/TimeKeeping/_NightTable.cshtml")]
namespace AspNetCore
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\_ViewImports.cshtml"
using PMS

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\_ViewImports.cshtml"
using PMS.Models

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"efff380852b33dfbc8613e2296327c95280aa7ce7afa4d3e9a2f5b346d9a67dd", @"/Views/TimeKeeping/_NightTable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"21d866b776ed6466e6893069e209361096b8f3be545ab23ace3daa4c5be95fd9", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_TimeKeeping__NightTable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<PMS.Models.TimeKeepingGroupModel>>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\TimeKeeping\_NightTable.cshtml"
  
    var antiForgeryToken = Html.AntiForgeryToken();

#line default
#line hidden
#nullable disable

            WriteLiteral("\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.css\" />\n<div id=\"simpleTimekeeping\" style=\"overflow:hidden;\">\n    ");
            Write(
#nullable restore
#line 8 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\TimeKeeping\_NightTable.cshtml"
     Html.AntiForgeryToken()

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"
    <div id=""hotContainer""></div>
    <script src=""https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.js""></script>
    <script>
        (function () {
            const container = document.getElementById('hotContainer');
            
            // Dữ liệu từ model
            const modelData = ");
            Write(
#nullable restore
#line 16 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\TimeKeeping\_NightTable.cshtml"
                               Html.Raw(Json.Serialize(Model ?? new List<PMS.Models.TimeKeepingGroupModel>()))

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@";
            
            // Xác định quý và năm từ URL params
            const urlParams = new URLSearchParams(window.location.search);
            const quarter = parseInt(urlParams.get('quy')) || 1;
            const year = parseInt(urlParams.get('nam')) || new Date().getFullYear();
            
            // Xác định tháng bắt đầu và kết thúc của quý
            const startMonth = (quarter - 1) * 3 + 1;
            const endMonth = quarter * 3;
            const monthCount = endMonth - startMonth + 1;
            
            // Tạo labels cho tháng của quý
            const monthLabels = [];
            for (let i = startMonth; i <= endMonth; i++) {
                monthLabels.push(`T${i}`);
            }
            
            const columns = [];

            // Cấu hình cột
            columns.push({ data: 0, type: 'numeric', width: 50 });  // STT
            columns.push({ data: 1, type: 'text', width: 250 });     // Họ và tên
            columns.push({ data: 2, type: 'text', width: 100 });     /");
            WriteLiteral(@"/ Mã nhân viên
            
            // Cột cho từng tháng của quý
            for (let i = 0; i < monthCount; i++) {
                columns.push({
                    data: 3 + i,
                    type: 'numeric',
                    numericFormat: { pattern: '0' },
                    allowInvalid: false,
                    width: 50
                });
            }
            
            columns.push({
                data: 3 + monthCount,
                type: 'numeric',
                readOnly: true,
                width: 80
            }); // Tổng quý

            const nestedHeaders = [
                ['Số TT', 'Họ và tên', 'Mã NV', ...monthLabels, 'TỔNG QUÝ']
            ];

            // Hàm tạo dòng nhóm
            function makeGroupRow(departmentName) {
                const row = new Array(4 + monthCount).fill('');
                row[1] = departmentName;
                row[2] = ''; // Mã phòng ban
                return row;
            }

            // Hàm tạo dòng nhân viên
  ");
            WriteLiteral(@"          function makeEmployeeRow(index, employee, monthlyData) {
                const row = new Array(4 + monthCount).fill('');
                row[0] = index;
                row[1] = employee.userName;
                row[2] = employee.userCode;
                
                // Điền dữ liệu tháng
                for (let month = startMonth; month <= endMonth; month++) {
                    const monthIndex = month - startMonth;
                    const monthData = monthlyData[month];
                    if (monthData && monthData.cd) { // Ca đêm
                        row[3 + monthIndex] = monthData.cd;
                    }
                }
                
                // Tính tổng quý
                let total = 0;
                for (let i = 3; i < 3 + monthCount; i++) {
                    if (row[i] && !isNaN(row[i])) {
                        total += parseFloat(row[i]);
                    }
                }
                row[3 + monthCount] = total;
                
                ");
            WriteLiteral(@"return row;
            }

            // Tạo dữ liệu từ model
            const data = [];
            let globalIndex = 1;
            
            modelData.forEach(department => {
                // Thêm dòng nhóm phòng ban
                data.push(makeGroupRow(department.departmentName));
                
                // Thêm dòng nhân viên
                department.employees.forEach(employee => {
                    data.push(makeEmployeeRow(globalIndex++, employee, employee.monthlyData));
                });
            });

            const hot = new Handsontable(container, {
                data: data,
                columns: columns,
                colHeaders: false,
                rowHeaders: true,
                nestedHeaders: nestedHeaders,
                height: calculateHotHeight(),
                width: '100%',
                manualColumnFreeze: true,
                manualColumnMove: true,
                fixedColumnsLeft: 3,
                rowHeaderWidth: 50,
                co");
            WriteLiteral(@"ntextMenu: {
                    items: {
                        row_above: {},
                        row_below: {},
                        hsep1: '---------',
                        freeze_column: { name: 'Cố định cột' },
                        unfreeze_column: { name: 'Bỏ cố định cột' },
                        hsep2: '---------',
                        undo: {},
                        redo: {},
                        clear_custom: {
                            name: 'Xóa nội dung các ô đã chọn',
                            callback() { hot.emptySelectedCells(); }
                        }
                    }
                },
                filters: true,
                dropdownMenu: true,
                licenseKey: 'non-commercial-and-evaluation',

                // Tô style cho dòng nhóm
                cells: function (row, col) {
                    const cellProperties = {};
                    const dataAtRow = this.instance.getDataAtRow(row);
                    // Nếu dòng là dòng n");
            WriteLiteral(@"hóm (chỉ có cột 1 có chữ)
                    if (dataAtRow[1] && dataAtRow[0] === '') {
                        cellProperties.readOnly = true;
                        cellProperties.renderer = function (instance, td, row, col, prop, value, cellProperties) {
                            td.style.fontStyle = 'italic';
                            td.style.color = 'blue';
                            td.style.fontWeight = 'bold';
                            td.style.background = '#f0f8ff';
                            td.innerHTML = value;
                        };
                    }
                    return cellProperties;
                },

                // Xử lý thay đổi dữ liệu
                afterChange: function(changes, source) {
                    if (source === 'loadData') return;
                    
                    changes.forEach(([row, prop, oldValue, newValue]) => {
                        if (oldValue === newValue) return;
                        
                        // Kiểm tra x");
            WriteLiteral(@"em có phải dòng nhân viên không (có STT)
                        const rowData = this.instance.getDataAtRow(row);
                        if (!rowData[0] || isNaN(rowData[0])) return; // Bỏ qua dòng nhóm
                        
                        // Xác định thông tin nhân viên và tháng
                        const employeeIndex = parseInt(rowData[0]) - 1;
                        const employee = getEmployeeFromRow(row);
                        if (!employee) return;
                        
                        // Xác định tháng từ cột
                        const monthIndex = parseInt(prop) - 3; // Trừ 3 cột đầu
                        if (monthIndex < 0 || monthIndex >= monthCount) return;
                        
                        const month = startMonth + monthIndex;
                        const field = 'cd'; // Ca đêm
                        
                        // Gọi API để cập nhật
                        updateTimeKeeping(employee.userId, month, year, quarter, field, newValue)");
            WriteLiteral(@";
                    });
                }
            });

            // Hàm lấy thông tin nhân viên từ dòng
            function getEmployeeFromRow(row) {
                const rowData = this.instance.getDataAtRow(row);
                const employeeIndex = parseInt(rowData[0]) - 1;
                
                let currentIndex = 0;
                for (const department of modelData) {
                    if (currentIndex === employeeIndex) {
                        return department.employees[employeeIndex - currentIndex];
                    }
                    currentIndex += department.employees.length + 1; // +1 cho dòng nhóm
                }
                return null;
            }

            // Hàm cập nhật dữ liệu chấm công
            function updateTimeKeeping(userId, month, year, quarter, field, value) {
                const operation = value === '' || value === null ? 'delete' : 'update';
                
                fetch('/TimeKeeping/UpdateTimeKeeping', {
                   ");
            WriteLiteral(@" method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({
                        userId: userId,
                        month: month,
                        year: year,
                        quarter: quarter,
                        field: field,
                        value: value === '' ? null : parseFloat(value),
                        operation: operation
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('Cập nhật thành công:', data.message);
                        // Có thể hiển thị thông báo thành công
                    } else {
                        console.error('Lỗi cập nhật:', data.message);
                        // Có thể hiển thị thông báo lỗi
                    }");
            WriteLiteral(@"
                })
                .catch(error => {
                    console.error('Lỗi network:', error);
                });
            }

            // Hàm tính chiều cao phù hợp
            function calculateHotHeight() {
                const windowHeight = window.innerHeight;
                const offset = 360; // Trừ phần header, filter, padding, navbar, ...
                const calculated = windowHeight - offset;
                return Math.max(calculated, 320); // Tối thiểu 320px
            }

            // Tự động resize khi thay đổi kích thước cửa sổ
            window.addEventListener('resize', () => {
                const newHeight = calculateHotHeight();
                hot.updateSettings({ height: newHeight });
            });

        })();
    </script>
</div>
");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<PMS.Models.TimeKeepingGroupModel>> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
