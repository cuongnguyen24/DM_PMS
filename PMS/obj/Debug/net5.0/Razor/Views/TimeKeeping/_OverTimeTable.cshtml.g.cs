#pragma checksum "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\TimeKeeping\_OverTimeTable.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "b5c2368617849a8f2b24c1aefe6bcdf4e2191198b08f32dd3dc7e97c6d4ddc88"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TimeKeeping__OverTimeTable), @"mvc.1.0.view", @"/Views/TimeKeeping/_OverTimeTable.cshtml")]
namespace AspNetCore
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\_ViewImports.cshtml"
using PMS

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\_ViewImports.cshtml"
using PMS.Models

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"b5c2368617849a8f2b24c1aefe6bcdf4e2191198b08f32dd3dc7e97c6d4ddc88", @"/Views/TimeKeeping/_OverTimeTable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"21d866b776ed6466e6893069e209361096b8f3be545ab23ace3daa4c5be95fd9", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_TimeKeeping__OverTimeTable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<PMS.Models.TimeKeepingResponse>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.css"" />
<div id=""overtimeTimekeeping"" style=""overflow:hidden;"">
    <div id=""overtimeHotContainer""></div>
    <script src=""https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.js""></script>
    <script>
        (function () {
            const container = document.getElementById('overtimeHotContainer');
            
            // Lấy dữ liệu từ model
            const overtimeData = ");
            Write(
#nullable restore
#line 12 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\TimeKeeping\_OverTimeTable.cshtml"
                                  Html.Raw(Json.Serialize(Model))

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@";
            
            if (!overtimeData || !overtimeData.departmentGroups) {
                return;
            }

            // Tạo header con cho mỗi tháng: ""giờ"" và ""công""
            const months = Array.from({ length: 12 }, (_, i) => `T${i + 1}`);
            const nestedHeaders = [
                [
                    'Số TT', 'Họ và tên',
                    ...months.flatMap(m => [m, '']), // 2 cột mỗi tháng
                    'Tổng hợp cả năm', ''
                ],
                [
                    '', '',
                    ...Array(12).fill(['giờ', 'công']).flat(),
                    'giờ', 'công'
                ]
            ];

            // Cấu hình cột:
            // 0: STT (numeric)
            // 1: Họ và tên (text)
            // 2..25: 12 tháng * 2 cột (numeric)
            // 26,27: tổng giờ và tổng công (readonly)
            const columns = [
                { data: 0, type: 'numeric', width: 50 }, // STT
                { data: 1, type: 'text', width: 250 },   // Họ v");
            WriteLiteral(@"à tên
            ];

            for (let i = 0; i < 24; i++) { // 12 tháng * 2 cột
                columns.push({
                    data: 2 + i,
                    type: 'numeric',
                    numericFormat: { pattern: '0.00' },
                    allowInvalid: false,
                    width: 60
                });
            }

            columns.push({ data: 26, type: 'numeric', readOnly: true, width: 80 }); // Tổng giờ
            columns.push({ data: 27, type: 'numeric', readOnly: true, width: 80 }); // Tổng công

            // Tạo dòng nhóm (in nghiêng, màu xanh)
            function makeGroupRow(label) {
                const row = new Array(28).fill('');
                row[1] = label;
                return row;
            }

            // Tạo dòng nhân viên với dữ liệu thực
            function makeEmployeeRow(index, employee) {
                const row = new Array(28).fill('');
                row[0] = index;
                row[1] = employee.fullName;
                
        ");
            WriteLiteral(@"        // Điền dữ liệu theo tháng (giờ và công)
                for (let month = 1; month <= 12; month++) {
                    const monthData = employee.monthlyData[month];
                    if (monthData) {
                        const offset = 2 + (month - 1) * 2;
                        row[offset] = monthData.lv || 0;      // Giờ (sử dụng LV)
                        row[offset + 1] = monthData.lv || 0;  // Công (sử dụng LV)
                    }
                }
                
                // Tổng giờ và công cả năm
                row[26] = employee.yearlyTotalLV || 0;
                row[27] = employee.yearlyTotalLV || 0;
                return row;
            }

            // Tạo dữ liệu từ model thực
            const data = [];
            let globalIndex = 1;
            
            overtimeData.departmentGroups.forEach(dept => {
                // Thêm dòng nhóm
                data.push(makeGroupRow(dept.departmentName));
                
                // Thêm dòng nhân viên
     ");
            WriteLiteral(@"           dept.employees.forEach(emp => {
                    data.push(makeEmployeeRow(globalIndex++, emp));
                });
            });

            const hot = new Handsontable(container, {
                data: data,
                columns: columns,
                nestedHeaders: nestedHeaders,
                colHeaders: false,
                rowHeaders: true,
                fixedColumnsLeft: 2, // cố định 2 cột STT + Họ tên
                manualColumnMove: true,
                manualColumnFreeze: true,
                height: calculateHotHeight(),
                width: '100%',
                rowHeaderWidth: 50,
                filters: true,
                dropdownMenu: true,
                licenseKey: 'non-commercial-and-evaluation',

                            // Tô style cho dòng nhóm
            cells: function (row, col) {
                const cellProperties = {};
                const dataAtRow = this.instance.getDataAtRow(row);
                // Nếu dòng là dòng nhóm (chỉ có ");
            WriteLiteral(@"cột 1 có chữ)
                if (dataAtRow[1] && dataAtRow[0] === '') {
                    cellProperties.readOnly = true;
                    cellProperties.renderer = function (instance, td, row, col, prop, value, cellProperties) {
                        td.style.fontStyle = 'italic';
                        td.style.color = 'blue';
                        td.style.fontWeight = 'bold';
                        td.style.background = '#f0f8ff';
                        td.innerHTML = value;
                    };
                }
                return cellProperties;
            },

            afterChange: function (changes, source) {
                if (!changes || source === 'loadData') return;
                
                const instance = this;
                
                // Xử lý từng thay đổi
                changes.forEach(([row, prop, oldVal, newVal]) => {
                    if (typeof prop === 'number' && prop >= 2 && prop <= 13) { // Cột tháng 1-12
                        // Cập nhật da");
            WriteLiteral(@"tabase
                        const rowData = instance.getDataAtRow(row);
                        
                        // Kiểm tra nếu đây là dòng nhân viên (không phải dòng group)
                        if (rowData[0] !== '' && rowData[1] && rowData[1] !== 'Người Quản lý' && rowData[1] !== 'Phòng tổng hợp HĐTV') { // OverTimeTable không có userCode column
                            // Tìm userId từ data gốc
                            const employeeName = rowData[1];
                            
                            // Tìm userId từ overtimeData
                            let userId = null;
                            overtimeData.departmentGroups.forEach(dept => {
                                dept.employees.forEach(emp => {
                                    if (emp.fullName === employeeName) {
                                        userId = emp.userId;
                                    }
                                });
                            });
                            
 ");
            WriteLiteral(@"                           if (userId) {
                                // Tính tháng từ column index  
                                const monthIndex = prop - 1; // prop 2 → month 1, prop 3 → month 2, ...
                                
                                // Lấy năm hiện tại từ filter
                                const currentYear = parseInt($('#selectYear').val()) || new Date().getFullYear();
                                

                                
                                // Gọi API cập nhật
                                updateOvertimeData(userId, monthIndex, currentYear, newVal);
                            }
                        }
                    }
                });
            }
            });

            // Hàm tính chiều cao phù hợp
            function calculateHotHeight() {
                const windowHeight = window.innerHeight;
                const offset = 360; // Trừ phần header, filter, padding, navbar, ...
                const calculated = wi");
            WriteLiteral(@"ndowHeight - offset;
                return Math.max(calculated, 320); // Tối thiểu 320px
            }

            // Tự động resize khi thay đổi kích thước cửa sổ
            window.addEventListener('resize', () => {
                const newHeight = calculateHotHeight();
                hot.updateSettings({ height: newHeight });
            });


        })();

        // Hàm cập nhật dữ liệu Overtime
        function updateOvertimeData(userId, month, year, value) {
            const requestData = {
                userId: userId,
                month: month,
                year: year,
                value: parseFloat(value) || 0
            };

            $.ajax({
                url: '/TimeKeeping/UpdateOvertime',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(requestData),
                success: function(response) {
                    if (response.success) {
                        showUpdateNotification('success', 'Đã cập nhật");
            WriteLiteral(@" thêm giờ!');
                        // Không reload tự động để tránh interrupt việc nhập liệu
                        // User có thể F5 để refresh nếu cần
                    } else {
                        showUpdateNotification('error', response.message);
                    }
                },
                error: function(xhr, status, error) {
                    showUpdateNotification('error', 'Lỗi kết nối: ' + error);
                }
            });
        }

        // Hàm hiển thị thông báo cập nhật
        function showUpdateNotification(type, message) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
            
            const notification = $(`
                <div class=""alert ${alertClass} alert-dismissible fade show update-notification"" role=""alert"" style=""position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;"">
                    <i ");
            WriteLiteral(@"class=""fa ${icon}""></i> ${message}
                    <button type=""button"" class=""close"" data-dismiss=""alert"">
                        <span>&times;</span>
                    </button>
                </div>
            `);
            
            $('body').append(notification);
            
            // Tự động ẩn sau 3 giây
            setTimeout(() => {
                notification.alert('close');
            }, 3000);
        }

        // Hàm khởi tạo với dữ liệu mẫu (fallback)
        function initializeWithSampleData() {
            document.getElementById('overtimeHotContainer').innerHTML = '<div class=""alert alert-info"">Không có dữ liệu thêm giờ để hiển thị.</div>';
        }

    </script>
</div>
");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<PMS.Models.TimeKeepingResponse> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
