#pragma checksum "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\TimeKeeping\_TimeTable.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "5ae1627cc92340d35948af2662a9380eec9b3c1c78516ce52796a07bc9a6d3e8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TimeKeeping__TimeTable), @"mvc.1.0.view", @"/Views/TimeKeeping/_TimeTable.cshtml")]
namespace AspNetCore
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\_ViewImports.cshtml"
using PMS

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\_ViewImports.cshtml"
using PMS.Models

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"5ae1627cc92340d35948af2662a9380eec9b3c1c78516ce52796a07bc9a6d3e8", @"/Views/TimeKeeping/_TimeTable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"21d866b776ed6466e6893069e209361096b8f3be545ab23ace3daa4c5be95fd9", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_TimeKeeping__TimeTable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<PMS.Models.TimeKeepingResponse>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.css"" />
<div id=""timeTimekeeping"" style=""overflow:auto;"">
    <div id=""timeHotContainer""></div>
    
    <div class=""text-muted"" style=""margin-top:8px;"">
        Ghi chú: LV (Làm việc), H(?), P (Phép, L (?)).
    </div>
    
    <script src=""https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.js""></script>
    <script>
        (function () {
            const container = document.getElementById('timeHotContainer');
            
            // Lấy dữ liệu từ model
            const timeKeepingData = ");
            Write(
#nullable restore
#line 17 "C:\Users\Admin\source\repos\DM_PMS-master\DM_PMS-master\PMS\Views\TimeKeeping\_TimeTable.cshtml"
                                     Html.Raw(Json.Serialize(Model))

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@";
            console.log('TimeKeeping data received:', timeKeepingData);
            
            if (!timeKeepingData || !timeKeepingData.departmentGroups) {
                console.warn('No data received, using sample data');
                // Sử dụng dữ liệu mẫu nếu không có dữ liệu thực
                initializeWithSampleData();
                return;
            }

            const monthLabels = Array.from({ length: 12 }, (_, i) => `T${i + 1}`);
            const subColumns = ['LV', 'H', 'P', 'L', 'OT', 'CD', 'KL'];

            // Nested headers: 2 rows
            const nestedHeaders = [
                ['Số TT', 'Họ và tên', 'Số TK', ...monthLabels.map(m => ({ label: m, colspan: subColumns.length })), { label: 'Tổng hợp cả năm', colspan: 1 }],
                ['', '', '', ...monthLabels.flatMap(() => subColumns), 'Tổng']
            ];

            // Build columns metadata
            const baseColumnCount = 3; // STT, Họ và tên, Số TK
            const totalMonthCols = monthLabels.length * subC");
            WriteLiteral(@"olumns.length;
            const totalColCount = baseColumnCount + totalMonthCols + 1; // +1 for yearly total

            const columns = [];
            // Base columns
            columns.push({ data: 0, type: 'numeric', width: 60 });
            columns.push({ data: 1, type: 'text', width: 180 });
            columns.push({ data: 2, type: 'text', width: 80 });
            // Monthly numeric columns
            for (let i = 0; i < totalMonthCols; i++) {
                columns.push({ data: baseColumnCount + i, type: 'numeric', numericFormat: { pattern: '0' }, allowInvalid: false, width: 45 });
            }
            // Yearly total (read-only for now)
            columns.push({ data: baseColumnCount + totalMonthCols, type: 'numeric', readOnly: true, width: 70 });

            // Hàm tạo dòng nhóm (in nghiêng, màu xanh)
            function makeGroupRow(label) {
                const row = new Array(totalColCount).fill('');
                row[1] = label;
                return row;
            }

      ");
            WriteLiteral(@"      // Hàm tạo dòng nhân viên với dữ liệu thực
            function makeEmployeeRow(index, employee) {
                const row = new Array(totalColCount).fill('');
                row[0] = index;
                row[1] = employee.fullName;
                row[2] = employee.userCode;
                
                // Điền dữ liệu theo tháng
                for (let month = 1; month <= 12; month++) {
                    const monthData = employee.monthlyData[month];
                    if (monthData) {
                        const offset = baseColumnCount + (month - 1) * subColumns.length;
                        row[offset + 0] = monthData.lv || 0;      // LV
                        row[offset + 1] = monthData.h || 0;        // H
                        row[offset + 2] = monthData.p || 0;        // P
                        row[offset + 3] = monthData.l || 0;        // L
                        row[offset + 4] = monthData.ots || 0;      // OT
                        row[offset + 5] = monthData.cd || 0; ");
            WriteLiteral(@"      // CD
                        row[offset + 6] = monthData.kl || 0;       // KL
                    }
                }
                
                // Tổng cả năm (LV)
                row[baseColumnCount + totalMonthCols] = employee.yearlyTotalLV || 0;
                return row;
            }

            // Tạo dữ liệu từ model thực
            const data = [];
            let globalIndex = 1;
            
            timeKeepingData.departmentGroups.forEach(dept => {
                // Thêm dòng nhóm
                data.push(makeGroupRow(dept.departmentName));
                
                // Thêm dòng nhân viên
                dept.employees.forEach(emp => {
                    data.push(makeEmployeeRow(globalIndex++, emp));
                });
            });

            const hot = new Handsontable(container, {
                data: data,
                columns: columns,
                colHeaders: false,
                rowHeaders: true,
                nestedHeaders: nestedHeaders,
   ");
            WriteLiteral(@"             height: calculateHotHeight(),
                width: '100%',
                stretchH: 'all',
                manualColumnFreeze: true,
                manualColumnMove: true,
                fixedColumnsLeft: 3,
                contextMenu: {
                    items: {
                        row_above: {},
                        row_below: {},
                        hsep1: '---------',
                        freeze_column: { name: 'Cố định cột' },
                        unfreeze_column: { name: 'Bỏ cố định cột' },
                        hsep2: '---------',
                        undo: {},
                        redo: {},
                        clear_custom: {
                            name: 'Xóa nội dung các ô đã chọn',
                            callback() { hot.emptySelectedCells(); }
                        }
                    }
                },
                filters: true,
                dropdownMenu: true,
                licenseKey: 'non-commercial-and-evaluation',

  ");
            WriteLiteral(@"              // Tô style cho dòng nhóm
                cells: function (row, col) {
                    const cellProperties = {};
                    const dataAtRow = this.instance.getDataAtRow(row);
                    // Nếu dòng là dòng nhóm (chỉ có cột 1 có chữ, cột 0 và 2 trống)
                    if (dataAtRow[1] && dataAtRow[0] === '' && dataAtRow[2] === '') {
                        cellProperties.readOnly = true;
                        cellProperties.renderer = function (instance, td, row, col, prop, value, cellProperties) {
                            td.style.fontStyle = 'italic';
                            td.style.color = 'blue';
                            td.style.fontWeight = 'bold';
                            td.style.background = '#f0f8ff';
                            td.innerHTML = value;
                        };
                    }
                    return cellProperties;
                },

                afterChange: function (changes, source) {
                    if (!cha");
            WriteLiteral(@"nges) return;
                    
                    // Tự động cập nhật STT cho từng nhóm
                    this.updateRowNumbers();
                    
                    // Tính tổng cho từng nhân viên
                    changes.forEach(([row, prop, oldVal, newVal]) => {
                        if (typeof prop === 'number' && prop >= baseColumnCount && prop < baseColumnCount + totalMonthCols) {
                            this.calculateYearlyTotal(row);
                        }
                    });
                },

                afterInit: function() {
                    // Cập nhật STT ban đầu
                    this.updateRowNumbers();
                }
            });

            // Hàm cập nhật STT tự động cho từng nhóm
            hot.updateRowNumbers = function() {
                let currentGroupIndex = 1;
                const data = this.getData();
                
                for (let i = 0; i < data.length; i++) {
                    const row = data[i];
                  ");
            WriteLiteral(@"  // Nếu là dòng nhóm, reset index
                    if (row[1] && row[0] === '' && row[2] === '') {
                        currentGroupIndex = 1;
                    } else if (row[0] !== '') {
                        // Nếu là dòng nhân viên, cập nhật STT
                        this.setDataAtCell(i, 0, currentGroupIndex++);
                    }
                }
            };

            // Hàm tính tổng cả năm cho một nhân viên
            hot.calculateYearlyTotal = function(rowIndex) {
                const rowData = this.getDataAtRow(rowIndex);
                let yearlyTotal = 0;
                
                // Tính tổng LV (Làm việc) cho cả năm
                for (let m = 0; m < monthLabels.length; m++) {
                    const offset = baseColumnCount + m * subColumns.length;
                    yearlyTotal += parseFloat(rowData[offset + 0]) || 0; // LV column
                }
                
                // Cập nhật cột tổng cả năm
                this.setDataAtCell(rowIndex, base");
            WriteLiteral(@"ColumnCount + totalMonthCols, yearlyTotal);
            };

            // Hàm tính chiều cao phù hợp
            function calculateHotHeight() {
                const windowHeight = window.innerHeight;
                const offset = 360; // Trừ phần header, filter, padding, navbar, ...
                const calculated = windowHeight - offset;
                return Math.max(calculated, 320); // Tối thiểu 320px
            }

            // Tự động resize khi thay đổi kích thước cửa sổ
            window.addEventListener('resize', () => {
                const newHeight = calculateHotHeight();
                hot.updateSettings({ height: newHeight });
            });

            console.log('TimeTable initialized successfully with real data');
        })();

        // Hàm khởi tạo với dữ liệu mẫu (fallback)
        function initializeWithSampleData() {
            console.log('Initializing with sample data');
            // Code khởi tạo với dữ liệu mẫu như cũ
        }
    </script>
</div>
");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<PMS.Models.TimeKeepingResponse> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
