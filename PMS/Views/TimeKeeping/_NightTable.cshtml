@model PMS.Models.TimeKeepingResponse

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.css" />
<div id="nightTimekeeping" style="overflow:hidden;">
    <div id="nightHotContainer"></div>
    <script src="https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.js"></script>
    <script>
        (function () {
            console.log('NightTable script started');
            const container = document.getElementById('nightHotContainer');
            
            if (!container) {
                console.error('Container nightHotContainer not found');
                return;
            }
            
            console.log('Container found, initializing Handsontable');
            
            // Lấy dữ liệu từ model
            const nightShiftData = @Html.Raw(Json.Serialize(Model));
            console.log('NightShift data received:', nightShiftData);
            
            if (!nightShiftData || !nightShiftData.departmentGroups) {
                console.warn('No data received, using sample data');
                // Sử dụng dữ liệu mẫu nếu không có dữ liệu thực
                initializeWithSampleData();
                return;
            }

            const monthLabels = Array.from({ length: 12 }, (_, i) => `T${i + 1}`);
            const columns = [];

            // Cấu hình cột
            columns.push({ data: 0, type: 'numeric', width: 50 });  // STT
            columns.push({ data: 1, type: 'text', width: 250 });     // Họ và tên
            for (let i = 0; i < 12; i++) {
                columns.push({
                    data: 2 + i,
                    type: 'numeric',
                    numericFormat: { pattern: '0' },
                    allowInvalid: false,
                    width: 50
                });
            }
            columns.push({
                data: 14,
                type: 'numeric',
                readOnly: true,
                width: 80
            }); // Tổng cả năm

            const nestedHeaders = [
                ['Số TT', 'Họ và tên', ...monthLabels, 'TỔNG HỢP CẢ NĂM']
            ];

            // Hàm tạo dòng nhóm (ví dụ: "Người Quản lý")
            function makeGroupRow(label) {
                const row = new Array(15).fill('');
                row[1] = label;
                return row;
            }

            // Hàm tạo dòng nhân viên với dữ liệu thực
            function makeEmployeeRow(index, employee) {
                const row = new Array(15).fill('');
                row[0] = index;
                row[1] = employee.fullName;
                
                // Điền dữ liệu theo tháng
                for (let month = 1; month <= 12; month++) {
                    const monthData = employee.monthlyData[month];
                    if (monthData) {
                        row[1 + month] = monthData.lv || 0; // Sử dụng LV để lưu giá trị ca đêm
                    }
                }
                
                // Tổng cả năm
                row[14] = employee.yearlyTotalLV || 0;
                return row;
            }

            // Tạo dữ liệu từ model thực
            const data = [];
            let globalIndex = 1;
            
            nightShiftData.departmentGroups.forEach(dept => {
                // Thêm dòng nhóm
                data.push(makeGroupRow(dept.departmentName));
                
                // Thêm dòng nhân viên
                dept.employees.forEach(emp => {
                    data.push(makeEmployeeRow(globalIndex++, emp));
                });
            });

            const hot = new Handsontable(container, {
                data: data,
                columns: columns,
                colHeaders: false,
                rowHeaders: true,
                nestedHeaders: nestedHeaders,
                height: calculateHotHeight(),
                width: '100%',
                manualColumnFreeze: true,
                manualColumnMove: true,
                fixedColumnsLeft: 2,
                rowHeaderWidth: 50,
                contextMenu: {
                    items: {
                        row_above: {},
                        row_below: {},
                        hsep1: '---------',
                        freeze_column: { name: 'Cố định cột' },
                        unfreeze_column: { name: 'Bỏ cố định cột' },
                        hsep2: '---------',
                        undo: {},
                        redo: {},
                        clear_custom: {
                            name: 'Xóa nội dung các ô đã chọn',
                            callback() { hot.emptySelectedCells(); }
                        }
                    }
                },
                filters: true,
                dropdownMenu: true,
                licenseKey: 'non-commercial-and-evaluation',

                // Tô style cho dòng nhóm
                cells: function (row, col) {
                    const cellProperties = {};
                    const dataAtRow = this.instance.getDataAtRow(row);
                    // Nếu dòng là dòng nhóm (chỉ có cột 1 có chữ)
                    if (dataAtRow[1] && dataAtRow[0] === '') {
                        cellProperties.readOnly = true;
                        cellProperties.renderer = function (instance, td, row, col, prop, value, cellProperties) {
                            td.style.fontStyle = 'italic';
                            td.style.color = 'blue';
                            td.style.fontWeight = 'bold';
                            td.style.background = '#f0f8ff';
                            td.innerHTML = value;
                        };
                    }
                    return cellProperties;
                }
            });

            // Hàm tính chiều cao phù hợp
            function calculateHotHeight() {
                const windowHeight = window.innerHeight;
                const offset = 360; // Trừ phần header, filter, padding, navbar, ...
                const calculated = windowHeight - offset;
                return Math.max(calculated, 320); // Tối thiểu 320px
            }

            // Tự động resize khi thay đổi kích thước cửa sổ
            window.addEventListener('resize', () => {
                const newHeight = calculateHotHeight();
                hot.updateSettings({ height: newHeight });
            });

            console.log('NightTable initialized successfully with real data');
        })();

        // Hàm khởi tạo với dữ liệu mẫu (fallback)
        function initializeWithSampleData() {
            console.log('Initializing NightTable with sample data');
            // Code khởi tạo với dữ liệu mẫu như cũ
        }
    </script>
</div>
