@model PMS.Models.TimeKeepingResponse

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.css" />
<div id="timeTimekeeping" style="overflow:auto;">
    <div id="timeHotContainer"></div>
    
    <div class="text-muted" style="margin-top:8px;">
        Ghi chú: LV (Làm việc), H(?), P (Phép, L (?)).
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.js"></script>
    <script>
        (function () {
            const container = document.getElementById('timeHotContainer');
            
            // Lấy dữ liệu từ model
            const timeKeepingData = @Html.Raw(Json.Serialize(Model));
            if (!timeKeepingData || !timeKeepingData.departmentGroups) {
                return;
            }

            // State management để tránh multiple triggers
            let isUpdating = false;
            let updateTimeout = null;

            const monthLabels = Array.from({ length: 12 }, (_, i) => `T${i + 1}`);
            const subColumns = ['LV', 'H', 'P', 'L', 'OTS', 'CD', 'KL'];

            // Nested headers: 2 rows
            const nestedHeaders = [
                ['Số TT', 'Họ và tên', 'Số TK', ...monthLabels.map(m => ({ label: m, colspan: subColumns.length })), { label: 'Tổng hợp cả năm', colspan: 1 }],
                ['', '', '', ...monthLabels.flatMap(() => subColumns), 'Tổng']
            ];

            // Build columns metadata
            const baseColumnCount = 3; // STT, Họ và tên, Số TK
            const totalMonthCols = monthLabels.length * subColumns.length;
            const totalColCount = baseColumnCount + totalMonthCols + 1; // +1 for yearly total

            const columns = [];
            // Base columns
            columns.push({ data: 0, type: 'numeric', width: 60 });
            columns.push({ data: 1, type: 'text', width: 180 });
            columns.push({ data: 2, type: 'text', width: 80 });
            // Monthly numeric columns
            for (let i = 0; i < totalMonthCols; i++) {
                columns.push({ data: baseColumnCount + i, type: 'numeric', numericFormat: { pattern: '0' }, allowInvalid: false, width: 45 });
            }
            // Yearly total (read-only for now)
            columns.push({ data: baseColumnCount + totalMonthCols, type: 'numeric', readOnly: true, width: 70 });

            // Hàm tạo dòng nhóm (in nghiêng, màu xanh)
            function makeGroupRow(label) {
                const row = new Array(totalColCount).fill('');
                row[1] = label;
                return row;
            }

            // Hàm tạo dòng nhân viên với dữ liệu thực
            function makeEmployeeRow(index, employee) {
                const row = new Array(totalColCount).fill('');
                row[0] = index;
                row[1] = employee.fullName;
                row[2] = employee.userCode;
                
                // Điền dữ liệu theo tháng
                for (let month = 1; month <= 12; month++) {
                    const monthData = employee.monthlyData[month];
                    if (monthData) {
                        const offset = baseColumnCount + (month - 1) * subColumns.length;
                        row[offset + 0] = monthData.lv || 0;      // LV
                        row[offset + 1] = monthData.h || 0;        // H
                        row[offset + 2] = monthData.p || 0;        // P
                        row[offset + 3] = monthData.l || 0;        // L
                        row[offset + 4] = monthData.ots || 0;      // OT
                        row[offset + 5] = monthData.cd || 0;       // CD
                        row[offset + 6] = monthData.kl || 0;       // KL
                    }
                }
                
                // Tổng cả năm (LV)
                row[baseColumnCount + totalMonthCols] = employee.yearlyTotalLV || 0;
                return row;
            }

            // Tạo dữ liệu từ model thực
            const data = [];
            let globalIndex = 1;
            
            timeKeepingData.departmentGroups.forEach(dept => {
                // Thêm dòng nhóm
                data.push(makeGroupRow(dept.departmentName));
                
                // Thêm dòng nhân viên
                dept.employees.forEach(emp => {
                    data.push(makeEmployeeRow(globalIndex++, emp));
                });
            });

            const hot = new Handsontable(container, {
                data: data,
                columns: columns,
                colHeaders: false,
                rowHeaders: true,
                nestedHeaders: nestedHeaders,
                height: calculateHotHeight(),
                width: '100%',
                stretchH: 'all',
                manualColumnFreeze: true,
                manualColumnMove: true,
                fixedColumnsLeft: 3,
                contextMenu: {
                    items: {
                        row_above: {},
                        row_below: {},
                        hsep1: '---------',
                        freeze_column: { name: 'Cố định cột' },
                        unfreeze_column: { name: 'Bỏ cố định cột' },
                        hsep2: '---------',
                        undo: {},
                        redo: {},
                        clear_custom: {
                            name: 'Xóa nội dung các ô đã chọn',
                            callback() { hot.emptySelectedCells(); }
                        }
                    }
                },
                filters: true,
                dropdownMenu: true,
                licenseKey: 'non-commercial-and-evaluation',

                // Tô style cho dòng nhóm
                cells: function (row, col) {
                    const cellProperties = {};
                    const dataAtRow = this.instance.getDataAtRow(row);
                    // Nếu dòng là dòng nhóm (chỉ có cột 1 có chữ, cột 0 và 2 trống)
                    if (dataAtRow[1] && dataAtRow[0] === '' && dataAtRow[2] === '') {
                        cellProperties.readOnly = true;
                        cellProperties.renderer = function (instance, td, row, col, prop, value, cellProperties) {
                            td.style.fontStyle = 'italic';
                            td.style.color = 'blue';
                            td.style.fontWeight = 'bold';
                            td.style.background = '#f0f8ff';
                            td.innerHTML = value;
                        };
                    }
                    return cellProperties;
                },

                afterChange: function (changes, source) {
                    if (!changes || source === 'loadData' || isUpdating) return;
                    
                    const instance = this;
                    
                    // Clear previous timeout
                    if (updateTimeout) {
                        clearTimeout(updateTimeout);
                    }
                    
                    // Debounce updates để tránh multiple calls
                    updateTimeout = setTimeout(() => {
                        isUpdating = true;
                        
                        try {
                            // Tự động cập nhật STT cho từng nhóm
                            if (typeof instance.updateRowNumbers === 'function') {
                                instance.updateRowNumbers();
                            }
                            
                            // Xử lý từng thay đổi
                            changes.forEach(([row, prop, oldVal, newVal]) => {
                                // Chỉ process nếu oldVal !== newVal để tránh infinite loop
                                if (oldVal === newVal) return;
                                
                                if (typeof prop === 'number' && prop >= baseColumnCount && prop < baseColumnCount + totalMonthCols) {
                                    // Tính tổng cho từng nhân viên
                                    if (typeof instance.calculateYearlyTotal === 'function') {
                                        instance.calculateYearlyTotal(row);
                                    }
                                    
                                    // Cập nhật database
                                    const rowData = instance.getDataAtRow(row);
                                    
                                    // Kiểm tra nếu đây là dòng nhân viên (không phải dòng group)
                                    if (rowData[0] !== '' && rowData[1] && rowData[2] !== '') {
                                        // Tìm userId từ data gốc
                                        const employeeName = rowData[1];
                                        const userCode = rowData[2];
                                        
                                        // Tìm userId từ timeKeepingData
                                        let userId = null;
                                        timeKeepingData.departmentGroups.forEach(dept => {
                                            dept.employees.forEach(emp => {
                                                if (emp.fullName === employeeName && emp.userCode === userCode) {
                                                    userId = emp.userId;
                                                }
                                            });
                                        });
                                        
                                        if (userId) {
                                            // Tính tháng và field type từ column index
                                            const monthIndex = Math.floor((prop - baseColumnCount) / subColumns.length) + 1;
                                            const fieldIndex = (prop - baseColumnCount) % subColumns.length;
                                            const fieldType = subColumns[fieldIndex]; // 'LV', 'H', 'P', 'L', 'OTS', 'CD', 'KL'
                                            
                                            // Lấy năm hiện tại từ filter
                                            const currentYear = parseInt($('#selectYear').val()) || new Date().getFullYear();
                                            
                                            
                                            
                                            // Gọi API cập nhật
                                            updateTimeKeepingData(userId, monthIndex, currentYear, fieldType, newVal);
                                        }
                                    }
                                }
                            });
                        } finally {
                            // Reset flag sau khi hoàn thành
                            setTimeout(() => {
                                isUpdating = false;
                            }, 100);
                        }
                    }, 300); // Debounce 300ms
                },

                afterInit: function() {
                    // Cập nhật STT ban đầu
                    if (typeof this.updateRowNumbers === 'function') {
                        this.updateRowNumbers();
                    }
                }
            });

            // Hàm cập nhật STT tự động cho từng nhóm
            hot.updateRowNumbers = function() {
                let currentGroupIndex = 1;
                const data = this.getData();
                
                for (let i = 0; i < data.length; i++) {
                    const row = data[i];
                    // Nếu là dòng nhóm, reset index
                    if (row[1] && row[0] === '' && row[2] === '') {
                        currentGroupIndex = 1;
                    } else if (row[0] !== '') {
                        // Nếu là dòng nhân viên, cập nhật STT
                        this.setDataAtCell(i, 0, currentGroupIndex++);
                    }
                }
            };

            // Hàm tính tổng cả năm cho một nhân viên
            hot.calculateYearlyTotal = function(rowIndex) {
                const rowData = this.getDataAtRow(rowIndex);
                let yearlyTotal = 0;
                
                // Tính tổng LV (Làm việc) cho cả năm
                for (let m = 0; m < monthLabels.length; m++) {
                    const offset = baseColumnCount + m * subColumns.length;
                    yearlyTotal += parseFloat(rowData[offset + 0]) || 0; // LV column
                }
                
                // Cập nhật cột tổng cả năm
                this.setDataAtCell(rowIndex, baseColumnCount + totalMonthCols, yearlyTotal);
            };

            // Hàm tính chiều cao phù hợp
            function calculateHotHeight() {
                const windowHeight = window.innerHeight;
                const offset = 360; // Trừ phần header, filter, padding, navbar, ...
                const calculated = windowHeight - offset;
                return Math.max(calculated, 320); // Tối thiểu 320px
            }

            // Tự động resize khi thay đổi kích thước cửa sổ
            window.addEventListener('resize', () => {
                const newHeight = calculateHotHeight();
                hot.updateSettings({ height: newHeight });
            });

                    // Hàm cập nhật dữ liệu TimeKeeping
        function updateTimeKeepingData(userId, month, year, fieldType, value) {
            try {
                const requestData = {
                    userId: userId,
                    month: month,
                    year: year,
                    fieldType: fieldType,
                    value: parseFloat(value) || 0
                };

                $.ajax({
                    url: '/TimeKeeping/UpdateTimeKeeping',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(requestData),
                    timeout: 10000,
                    success: function(response) {
                        if (response && response.success) {
                            showUpdateNotification('success', 'Đã cập nhật!');
                        } else {
                            showUpdateNotification('error', response ? response.message : 'Lỗi không xác định');
                        }
                        isUpdating = false;
                    },
                    error: function(xhr, status, error) {
                        let errorMessage = 'Lỗi kết nối';
                        if (xhr.responseText) {
                            try {
                                const errorResponse = JSON.parse(xhr.responseText);
                                errorMessage = errorResponse.message || errorMessage;
                            } catch (e) {
                                errorMessage = xhr.responseText.substring(0, 100);
                            }
                        }
                        showUpdateNotification('error', errorMessage + ': ' + error);
                        isUpdating = false;
                    }
                });
            } catch (error) {
                showUpdateNotification('error', 'Lỗi JavaScript: ' + error.message);
                isUpdating = false;
            }
        }

            // Hàm hiển thị thông báo cập nhật
            function showUpdateNotification(type, message) {
                try {
                    const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
                    const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
                    
                    const notification = $(`
                        <div class="alert ${alertClass} alert-dismissible fade show update-notification" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 99999; min-width: 300px; max-width: 400px;">
                            <i class="fa ${icon}"></i> ${message}
                            <button type="button" class="close" data-dismiss="alert">
                                <span>&times;</span>
                            </button>
                        </div>
                    `);
                    
                    $('body').append(notification);
                    
                    setTimeout(() => {
                        try {
                            notification.alert('close');
                        } catch (e) {
                            notification.remove();
                        }
                    }, 3000);
                } catch (error) {
                    alert(message);
                }
            }

        })();

        // Hàm khởi tạo với dữ liệu mẫu (fallback)
        function initializeWithSampleData() {
            document.getElementById('timeHotContainer').innerHTML = '<div class="alert alert-info">Không có dữ liệu để hiển thị.</div>';
        }


    </script>
</div>
