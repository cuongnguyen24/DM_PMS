<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.css" />
<div id="timekeepingHotWrapper" style="overflow:auto;">
    <div id="timekeepingHot"></div>
    
    <div class="text-muted" style="margin-top:8px;">
        Ghi chú: LV (Làm việc), H(?), P (Phép, L (?)).
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.js"></script>
    <script>
        (function () {
            const container = document.getElementById('timekeepingHot');

            const monthLabels = Array.from({ length: 12 }, (_, i) => `T${i + 1}`);
            const subColumns = ['LV', 'H', 'P', 'L', 'OT', 'CD', 'KL'];

            // Nested headers: 2 rows
            const nestedHeaders = [
                ['Số TT', 'Họ và tên', 'Số TK', ...monthLabels.map(m => ({ label: m, colspan: subColumns.length })), { label: 'Tổng hợp cả năm', colspan: 1 }],
                ['', '', '', ...monthLabels.flatMap(() => subColumns), 'Tổng']
            ];

            // Build columns metadata
            const baseColumnCount = 3; // STT, Họ và tên, Số TK
            const totalMonthCols = monthLabels.length * subColumns.length;
            const totalColCount = baseColumnCount + totalMonthCols + 1; // +1 for yearly total

            const columns = [];
            // Base columns
            columns.push({ data: 0, type: 'numeric', width: 60 });
            columns.push({ data: 1, type: 'text', width: 180 });
            columns.push({ data: 2, type: 'text', width: 80 });
            // Monthly numeric columns
            for (let i = 0; i < totalMonthCols; i++) {
                columns.push({ data: baseColumnCount + i, type: 'numeric', numericFormat: { pattern: '0' }, allowInvalid: false, width: 45 });
            }
            // Yearly total (read-only for now)
            columns.push({ data: baseColumnCount + totalMonthCols, type: 'numeric', readOnly: true, width: 70 });

            function makeRow(index, fullName, account) {
                const row = new Array(totalColCount).fill('');
                row[0] = index;
                row[1] = fullName;
                row[2] = account;
                // Sample values per month: LV=20, H=2, others blank
                for (let m = 0; m < monthLabels.length; m++) {
                    const offset = baseColumnCount + m * subColumns.length;
                    row[offset + 0] = 20; // LV
                    row[offset + 1] = 2;  // H
                }
                // Example yearly total: sum LV across 12 months
                row[baseColumnCount + totalMonthCols] = monthLabels.length * 20;
                return row;
            }

            const data = [
                makeRow(1, 'Nguyễn 111', 'xxx'),
                makeRow(2, 'Nguyễn 112', 'xxx'),
                makeRow(3, 'Nguyễn 113', 'xxx'),
                makeRow(4, 'Nguyễn 114', 'xxx'),
                makeRow(5, 'Nguyễn 115', 'xxx'),
            ];

            const hot = new Handsontable(container, {
                data: data,
                columns: columns,
                colHeaders: false,
                rowHeaders: true,
                nestedHeaders: nestedHeaders,
                height: calculateHotHeight(),
                width: '100%',
                stretchH: 'all',
                manualColumnFreeze: true,
                manualColumnMove: true,
                fixedColumnsLeft: 3,
                contextMenu: {
                    items: {
                        row_above: {},
                        row_below: {},
                        hsep1: '---------',
                        freeze_column: { name: 'Cố định cột' },
                        unfreeze_column: { name: 'Bỏ cố định cột' },
                        hsep2: '---------',
                        undo: {},
                        redo: {},
                        clear_custom: {
                            name: 'Xóa nội dung các ô đã chọn',
                            callback() { hot.emptySelectedCells(); }
                        }
                    }
                },
                filters: true,
                dropdownMenu: true,
                licenseKey: 'non-commercial-and-evaluation'
            });

            // Hàm tính chiều cao phù hợp
            function calculateHotHeight() {
                const windowHeight = window.innerHeight;
                const offset = 360; // Trừ phần header, filter, padding, navbar, ...
                const calculated = windowHeight - offset;
                return Math.max(calculated, 320); // Tối thiểu 320px
            }

            // Tự động resize khi thay đổi kích thước cửa sổ
            window.addEventListener('resize', () => {
                const newHeight = calculateHotHeight();
                hot.updateSettings({ height: newHeight });
            });
        })();
    </script>
</div>
